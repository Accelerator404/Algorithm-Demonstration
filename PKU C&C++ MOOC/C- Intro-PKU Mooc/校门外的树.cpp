#include <iostream>
using namespace std;

//校门外的树
//某校大门外长度为L的马路上有一排树，每两棵相邻的树之间的间隔都是1米。
//我们可以把马路看成一个数轴，马路的一端在数轴0的位置，另一端在L的位置；
//数轴上的每个整数点，即0，1，2，……，L，都种有一棵树。
//马路上有一些区域要用来建地铁，这些区域用它们在数轴上的起始点和终止点表示。
//已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。
//现在要把这些区域中的树（包括区域端点处的两棵树）移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。
//输入:输入的第一行有两个整数L（1 <= L <= 10000）和 M（1 <= M <= 100），
//L代表马路的长度，M代表区域的数目，L和M之间用一个空格隔开。
//接下来的M行每行包含两个不同的整数，用一个空格隔开，表示一个区域的起始点和终止点的坐标。
//输出:输出包括一行，这一行只包含一个整数，表示马路上剩余的树的数目。

int main() {
    int L,M,count = 0;
    cin >> L >> M;
    int metroPlot[2][100]; //这个很有灵性，数组第二维范围设为M，则在coursera上会complie error，故索性直接设为100——然后过了
    for (int i = 0; i < M; i++){
        cin >> metroPlot[0][i] >> metroPlot[1][i];
    }
    int road[10001] = {0}; //将坐标有树设定为0状态

    for (int i = 0; i < M; i++){
        int j = metroPlot[0][i];
        while(j <= metroPlot[1][i]){
            if (road[j] == 0)
                road[j] = 1; //树被移走，处于没有树状态则设为1
            j++;
        }
    }
    
    for (int i = 0;i < L + 1;i++){
        if(road[i] == 0)
            count++;
    }
    cout << count <<endl;
    return 0;
}
